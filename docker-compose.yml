# Copyright 2016-2018 ConfluentInc - Apache 2
# Copyright 2018 Kmart
# Derived from https://github.com/confluentinc/cp-docker-images/blob/5.0.0-post/examples/cp-all-in-one/docker-compose.yml
# See above repository for examples of additional services

---
version: "3.4"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    hostname: zookeeper
    networks:
      - siab
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:5.0.0
    hostname: broker
    depends_on:
      - zookeeper
    networks:
      - siab
    ports:
      # Map default port 9092 to PLAINTEXT_HOST port so that this broker can be
      # used as the bootstrap host. The target port needs to be open too,
      # because after bootstrapping the client will talk directly to that port.
      # https://stackoverflow.com/a/44387281
      - "9092:29092"
      - "29092:29092"
    environment:
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LOG4J_ROOT_LOGLEVEL: DEBUG
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TOOLS_LOG4J_ROOT_LOGLEVEL: DEBUG
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.1.0
    hostname: schema-registry
    networks:
      - siab
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
      SCHEMA_REGISTRY_DEBUG: "true"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"

  connect:
    image: confluentinc/cp-kafka-connect:5.1.0
    hostname: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - localstack
    ports:
      - "8083:8083"
    networks:
      - siab
    volumes:
      - mi2:/usr/share/java/monitoring-interceptors/
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_SCHEMA_COMPATIBILITY: "NONE"
      CONNECT_ENHANCED_SCHEMA_SUPPORT: "true"
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_PRODUCER_REQUEST_TIMEOUT_MS: 120000
      CONNECT_PRODUCER_RETRY_BACKOFF_MS: 500
      CONNECT_CONSUMER_REQUEST_TIMEOUT_MS: 120000
      CONNECT_CONSUMER_RETRY_BACKOFF_MS: 500
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.0.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: /usr/share/java
      # CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_KEY: test
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_TOOLS_LOG4J_ROOT_LOGLEVEL: DEBUG
      S3_REGION: "ap-southeast-2"

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.1.0
    hostname: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - connect
      # - ksql-server
    ports:
      - "9021:9021"
    networks:
      - siab
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_CONNECT_CLUSTER: "connect-source:8091"
      CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  lts-api:
    build:
      context: ../sophia-lts-api
      args:
        - HTTPS_PROXY=$HTTPS_PROXY
        - https_proxy=$HTTPS_PROXY
      network: host
    command: ./go.sh init run
    restart: always
    depends_on:
      - localstack
    ports:
      - "8070:8070"
    networks:
      - siab
    environment:
      AWS_DEFAULT_REGION: ap-southeast-2
      AWS_ACCESS_KEY_ID: "dummy-key-id"
      AWS_SECRET_ACCESS_KEY: "dummy-key"
      LOGGING_LEVEL_THIRD_PARTY: "INFO"
      LOGGING_LEVEL: "INFO"
      SOPHIA_LTS_API_PORT: 8070
      SOPHIA_LTS_API_RAW_BUCKET: "raw-test"
      SOPHIA_LTS_API_S3_ENDPOINT: http://localstack:4572
      SOPHIA_LTS_API_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SOPHIA_LTS_API_RECORD_METADATA: "true"
      SOPHIA_LTS_API_REGISTER_SCHEMA: "true"
      SOPHIA_LTS_API_BOOTSTRAP_BROKERS: broker:9092
      SOPHIA_LTS_API_METADATA_REPLICATION_FACTOR: 1

  kafka-setup:
    image: confluentinc/cp-enterprise-kafka:5.0.0
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - broker
      - schema-registry
    networks:
      - siab
    volumes:
      - $PWD/connectors:/tmp/connectors
      - $PWD/dashboard:/tmp/dashboard
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b broker:9092 1 20 && \
      kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 2 --replication-factor 1 --topic test-1'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  localstack:
    image: localstack/localstack
    ports:
      - "4567-4584:4567-4584"
      - "8080:8080"
    networks:
      - siab
    environment:
      SERVICES: s3:4572, lambda:4574
      DEFAULT_REGION: ap-southeast-2
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - "localstack_data:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  kafka-client-service:
    build:
      context: .
      dockerfile: ./range-kafka-client/Dockerfile
    depends_on:
      - kafka-setup
    networks:
      - siab
    restart: always

volumes:
  mi2: {}
  localstack_data: {}

networks:
  siab:
